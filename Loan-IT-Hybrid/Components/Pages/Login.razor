@page "/"
@inject NavigationManager Navigation
@inject DatabaseService DbService
@inject SessionService Session

<div class="min-h-screen flex items-center justify-center bg-base-200">
    <div class="w-full max-w-sm p-8 bg-white rounded-xl shadow-lg">
        <h2 class="text-2xl font-bold mb-6 text-center text-primary">Login to LoanIT</h2>
        <EditForm Model="@loginData" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-control mb-4">
                <label class="label">
                    <span class="label-text">Email</span>
                </label>
                <InputText class="input input-bordered w-full" @bind-Value="loginData.Email" />
                <ValidationMessage For="@(() => loginData.Email)" />
            </div>

            <div class="form-control mb-6">
                <label class="label">
                    <span class="label-text">Password</span>
                </label>
                <InputText type="password" class="input-bordered w-full" @bind-Value="loginData.Password" />
                <ValidationMessage For="@(() => loginData.Password)" />
            </div>

            <button class="btn btn-primary w-full" type="submit">Login</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="mt-4 text-center text-success">
                @message
            </div>
        })

        <div class="mt-4 text-center text-sm">
            Don't have an account?
            <a href="/register" class="text-primary hover:underline">Register here</a>
        </div>
    </div>
</div>

@code {
    private LoginModel loginData = new();
    private string message = string.Empty;

    private async Task HandleLogin()
    {
        var user = await DbService.LoginUserAsync(loginData.Email);
        if (user == null || !BCrypt.Net.BCrypt.Verify(loginData.Password, user.PasswordHash))
        {
            message = "Invalid email or password";
            return;
        }
        message = "Login successful!";
        await Task.Delay(2000);
        Session.Login(user.Email);
        Navigation.NavigateTo("/home");
    }

    public class LoginModel
    {
        [Required, EmailAddress]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }
}
